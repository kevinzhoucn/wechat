{% extends 'AcmeWebBundle:Layout:device_base.html.twig' %}
{% import 'AcmeWebBundle:Common/Macros:buttons.html.twig' as buttons %}

{% block title %}设备客户端{% endblock %}

{% block body_content %}
    <div class="container-fluid">
        <div class="row">
            {% include 'AcmeWebBundle:Common:mqtt_sidebar.html.twig' %}
            {% include 'AcmeWebBundle:Frontend/Device/MQTT/partials:_targetdev.html.twig' %}
            {% include 'AcmeWebBundle:Frontend/Device/MQTT/partials:_sourcedev.html.twig' %}
        </div>
    </div>
{% endblock %}

{% block body_javascript %}
  <script src='/js/jquery-1.7.2.min.js'></script>
  <script src="/js/mqttws31.js"></script>
  <script src="/js/mqtt/jimuiot.js"></script>
  <script>//<![CDATA[

    $(document).ready(function(){
        $('#manualsetlink').click(function(event){
          event.preventDefault();
          $('#manualsetlink').hide();
          $('#manualconfirm').show();
        });

        $('#manualsetcancel').click(function(event){
          event.preventDefault();
          $('#manualconfirm').hide();
          $('#manualsetlink').show();
        });
    });


    $(document).ready(function(){
      var timestamp = Date.parse(new Date()); 
      var first_message = true;

      var message_number = 0;

      console.log(timestamp);

      // alert(timestamp);

      // $("#connect_clientId").val("example-"+(Math.floor(Math.random() * 100000)));
      var clientId = "clientdemo-" + (Math.floor(Math.random() * 100000));
      if( !window.WebSocket) {
        // $("#connect").html("\
        //     <h1>Get a new Web Browser!</h1>\
        //     <p>\
        //     Your browser does not support WebSockets. This example will not work properly.<br>\
        //     Please use a Web Browser with WebSockets support (WebKit or Google Chrome).\
        //     </p>\
        // ");
      } else {
        var client, destination;
        
        // var host = "168.63.134.186";
        // var host = "182.92.227.161";
        var host = "121.42.180.136";
        var port = "61623";
        var user = "admin";
        var password = "password";

        destination = "IOTCOM/RAWDATA/{{ username }}/{{ devname }}";
        // destination = "IOTCOM/RAWDATA/test/device1";
        var t_config_dest = "IOTCOM/SUBCONFIG/{{ username }}/{{ devname }}";        

        var t_dev_random = parseInt(Math.random() * (9999 - 1000 + 1) + 1000);
        console.log(t_dev_random);
        var t_dev_random_name = "devdemo" + t_dev_random;
        var t_destination = "IOTCOM/RAWDATA/{{ username }}/devdemo" + t_dev_random;
        // t_destination = "IOTCOM/RAWDATA/test1/device1";
        console.log(t_destination);

        client = new Messaging.Client(host, Number(port), clientId);
        //client = new Messaging.Client(host, Number(port), clientId);

        // the client is notified when it is connected to the server.
        var onConnect = function(frame) {
          debug("connected to IOTCOM");
          debug("connect to topic: " + destination);
          // $('#connect').fadeOut({ duration: 'fast' });
          // $('#connected').fadeIn();
          client.subscribe(destination);

          
        };

        $('#manualsetok').click(function(event){
          event.preventDefault();
          $('#manualconfirm').hide();
          $('#manual').show();

          var msg = "oridev=" + t_dev_random_name;
          message = new Messaging.Message(msg);
          message.destinationName = t_config_dest;
          client.send(message);

          // debug("create new topic: " + t_destination);
          console.log("create new topic: " + t_destination);
        });

        // this allows to display debug logs directly on the web page
        var debug = function(str) {
          $("#info").append(document.createTextNode(str + "\n"));
        };

        // $('#disconnect').click(function() {
        //   client.disconnect();
        //   $('#connected').fadeOut({ duration: 'fast' });
        //   $('#connect').fadeIn();
        //   $("#messages").html("")
        //   return false;
        // });

        // $('#send_form').submit(function() {
        //   var text = $('#send_form_input').val();
        //   if (text) {
        //     var buffer = new ArrayBuffer(4);
        //     var bytes = new Uint8Array(buffer);
        //     bytes[0] = 16;

        //     console.log(bytes);

        //     message = new Messaging.Message(bytes);
        //     message.destinationName = t_destination;
        //     client.send(message);

        //     debug("send message: '" + text + "' to topic: " + t_destination);
        //     $('#send_form_input').val("");
        //   }
        //   return false;
        // });

        $('#send_button').click(function(event){
          event.preventDefault();
          var text = $('#send_form_input').val();
          var message;

          if (!text) return;

          var hexChecked = $("#hexInputSend").attr("checked");

          if (hexChecked) {
            console.log("send bytes:");
            if (text.length > 2) {
              if (text.length %2 != 0) {
                text = text.substring(0, text.length - 1);
              }

              var sendText = "";
              // console.log("text length: " + text.length);
              var bufferSize = text.length / 2;
              var buffer = new ArrayBuffer(bufferSize);
              var bytes = new Uint8Array(buffer);

              var tempData;
              var j = 0;
              for (var i = 0; i < text.length; i++) {
                tempData = text[i];
                // console.log("current index: " + i + " current value: " + tempData);

                if (i%2 == 0){
                  // console.log("index value: " + i);                
                  continue;
                }

                if ( i == 1) {
                  tempData = text.substring(0, 2);
                } else {
                  tempData = text.substring(i-1, i+1);
                }

                console.log(tempData);
                bytes[j++] = "0x" + tempData;
              };

              console.log(bytes);

              message = new Messaging.Message(bytes);
            } 
          } else {
              console.log("send string:");
              message = new Messaging.Message(text);

              console.log(text);
          }
          // message.destinationName = t_destination;
          message.destinationName = t_destination;
          client.send(message);

          debug("send message: '" + text + "' to topic: " + t_destination);
        });

        function onFailure(failure) {
          debug("failure");
          debug(failure.errorMessage);
        }

        function onMessageArrived(message) {
          var current_timestamp = Date.parse(new Date());

          // console.log(current_timestamp);
          // console.log(current_timestamp - timestamp);

          if ( first_message && current_timestamp - timestamp <= 1000) {
            // alert(first_message);
            first_message = false;
            return;
          }

          var total_messages = $("#messages").text();
          if( total_messages.length > 1000 ) $("#messages").text("");

          var hexChecked = $("#hexInput").attr("checked");
          console.log(hexChecked);

          if (hexChecked) {
            // var bytes = message.payload
            //message.payloadBytes
            var bytes = message.payloadBytes;
            console.log(bytes);

            message_number = message_number + bytes.length;

            var bytesString = "";
            for (var i = 0; i < bytes.length; i++) {
              bytesString = bytesString + bytes[i].toString(16) + " ";
            };
            $("#messages").append(document.createTextNode(bytesString));
          } else {
            var message_str = message.payloadString;
            $("#messages").append(document.createTextNode(message_str));

            message_number = message_number + message_str.length;
          }

          console.log("message length: " + message_number);
          $("#rec_length").text(message_number);
        }

        function onConnectionLost(responseObject) {
          if (responseObject.errorCode !== 0) {
            debug(client.clientId + ": " + responseObject.errorCode + "\n");
          }
        }

        client.onConnect = onConnect;

        client.onMessageArrived = onMessageArrived;
        client.onConnectionLost = onConnectionLost;

        client.connect({
          userName:user, 
          password:password, 
          onSuccess:onConnect, 
          onFailure:onFailure
        }); 
      }


    });    
  //]]></script>
{% endblock %}